# $Id: Makefile.linux,v 1.95 2017/12/12 11:40:14 nanard Exp $
# MiniUPnP project
# (c) 2006-2020 Thomas Bernard
# http://miniupnp.free.fr/ or https://miniupnp.tuxfamily.org/
# Author : Thomas Bernard
# for use with GNU Make
#
# options can be passed to configure through CONFIG_OPTIONS :
# $ CONFIG_OPTIONS="--ipv6 --igd2" make
#
# To install use :
# $ DESTDIR=/dummyinstalldir make install
# or :
# $ INSTALLPREFIX=/usr/local make install
# or :
# $ make install
# (default INSTALLPREFIX is /usr)
#

CONFIG_OPTIONS ?= $(cat .configure.cache)
CONFIG_OPTIONS += --firewall=sdn
#CFLAGS = -O -g -DDEBUG
CFLAGS ?= -Os # A special optimization level(O2.5?).
CFLAGS += -fno-strict-aliasing # With this option, the compiler would not apply rules on aliasing of pointers. 
CFLAGS += -fno-common  #Place generated individual zero-initialized definitions for tentative definition in a ZI section.
CFLAGS += -fstack-protector -fPIE #Enable PIE protection, just some ctf-related stuff
CFLAGS += -D_FORTIFY_SOURCE=2 #Enable some checks against buffer overflow during runtime
CPPFLAGS += -D_GNU_SOURCE 
CFLAGS += -Wall # Print all waring messages
CFLAGS += -Wextra -Wstrict-prototypes # Print some extra warings that are not enabled by -Wall
#CFLAGS += -Wno-missing-field-initializers
#CFLAGS += -ansi	# only support ansi standard C. Keywords like "typeof" is prohibited.
CFLAGS += -Wno-unused-parameter -Wno-unused-function # Just for dev use
LDFLAGS += -Wl,-z,now -Wl,-z,relro -pie
CC ?= gcc
RM = rm -f
INSTALL = install
STRIP ?= strip # strip unecessary information (e.g. debug info) from the file
PKG_CONFIG ?= pkg-config
CP = cp
DOXYGEN ?= doxygen
JSONBUILDPATH = json/build

DEPFLAGS = -MM -MG -MT $(patsubst %.d,%.o,$@) -MT $@
# -M : with system library(e.g. stdio) headers, -MM : without
# -MG: Treat missing header files as they exist, and assume they are under the same directory with the sources.
# -MT: The target of the rules in the dependency file.

INSTALLPREFIX ?= $(PREFIX)/usr
SBININSTALLDIR = $(INSTALLPREFIX)/sbin
ETCINSTALLDIR = $(PREFIX)/etc/miniupnpd
MANINSTALLDIR = $(INSTALLPREFIX)/share/man/man8

include config.mk
include $(SRCDIR)/gitrev.mk
include $(SRCDIR)/objects.mk

# sources in netfilter/ directory
#NETFILTEROBJS = iptcrdr.o iptpinhole.o nfct_get.o
JSONLIB = $(JSONBUILDPATH)/libjson-c.a
SDNOBJS = iptcrdr.o iptpinhole.o nfct_get.o onosclient.o mongoose.o

ALLOBJS = $(BASEOBJS) $(LNXSDNOBJS) $(SDNOBJS)

DEP = $(ALLOBJS:.o=.d)

#LDLIBS += -lnfnetlink

## OpenWrt packager disables https server for IGD v2 and hardcodes libuuid support
ifeq ($(TARGET_OPENWRT),)
LDLIBS += $(shell $(PKG_CONFIG) --static --libs-only-l libssl)

TEST := $(shell $(PKG_CONFIG) --exists uuid && echo 1)
ifeq ($(TEST),1)
LDLIBS += $(shell $(PKG_CONFIG) --static --libs-only-l uuid)
else
$(info please install uuid-dev package / libuuid)
endif # ($(TEST),1)
endif # ($(TARGET_OPENWRT,)

GLIBC_VERSION := $(shell ldd --version | head -n 1 | sed 's/^.* //') # 's/^.* //' remove all words trailing with space. 
GLIBC_VERSION_MAJOR = $(shell echo $(GLIBC_VERSION) | cut -f 1 -d . ) # -f the order of the selected field, -d the delimiter
GLIBC_VERSION_MINOR = $(shell echo $(GLIBC_VERSION) | cut -f 2 -d . )
# clock_gettime() needs -lrt when glibc version < 2.17
LDLIBS += $(shell if [ $(GLIBC_VERSION_MAJOR) -lt 2 ] \
  || [ \( $(GLIBC_VERSION_MAJOR) -eq 2 \) -a \( $(GLIBC_VERSION_MINOR) -lt 17 \) ] ; \
  then echo "-lrt" ; fi )

TESTUPNPDESCGENOBJS = testupnpdescgen.o upnpdescgen.o

EXECUTABLES = miniupnpd testupnpdescgen testgetifstats \
              testupnppermissions miniupnpdctl testgetifaddr \
              testgetroute testasyncsendto testportinuse \
              testssdppktgen testminissdp testjwtauth

.PHONY:	all clean install depend dox

all:	$(EXECUTABLES)

clean:
	$(RM) config.h
	$(RM) config.mk
	$(RM) $(ALLOBJS)
	$(RM) $(DEP)
	$(RM) $(EXECUTABLES)
	$(RM) testupnpdescgen.o testgetifstats.o
	$(RM) testupnppermissions.o testgetifaddr.o
	$(RM) testgetroute.o testasyncsendto.o
	$(RM) testportinuse.o
	$(RM) testminissdp.o
	$(RM) testssdppktgen.o
	$(RM) testjwtauth.o
	$(RM) miniupnpdctl.o
	$(RM) validateupnppermissions validategetifaddr validatessdppktgen
	$(RM) -r dox/

install:	miniupnpd $(SRCDIR)/miniupnpd.8 miniupnpd.conf \
	$(SRCDIR)/linux/miniupnpd.init.d.script
	$(STRIP) miniupnpd
	$(INSTALL) -d $(DESTDIR)$(SBININSTALLDIR)
	$(INSTALL) miniupnpd $(DESTDIR)$(SBININSTALLDIR)
	$(INSTALL) -d $(DESTDIR)$(ETCINSTALLDIR)
	$(INSTALL) --mode=0644 -b $(SRCDIR)/miniupnpd.conf $(DESTDIR)$(ETCINSTALLDIR)
	$(INSTALL) -d $(DESTDIR)$(PREFIX)/etc/init.d
	$(INSTALL) $(SRCDIR)/linux/miniupnpd.init.d.script $(DESTDIR)$(PREFIX)/etc/init.d/miniupnpd
	$(INSTALL) -d $(DESTDIR)$(MANINSTALLDIR)
	$(INSTALL) --mode=0644 $(SRCDIR)/miniupnpd.8 $(DESTDIR)$(MANINSTALLDIR)
	gzip -f $(DESTDIR)$(MANINSTALLDIR)/miniupnpd.8

# genuuid is using the uuidgen CLI tool which is part of libuuid
# from the e2fsprogs
# 'cat /proc/sys/kernel/random/uuid' could be also used

#Note: $@ stands for the current target file
#      $< stands for the "first" current dependency file
#      $^ stands for the all current dependency file
#      $* stands for the target file, but without its file extension
#      $? stands for the dependency files needed to be reconstructed or modified

miniupnpd.conf:	$(SRCDIR)/miniupnpd.conf
# ifeq ($(TARGET_OPENWRT),)
#	sed -e "s/^uuid=[-0-9a-f]*/uuid=`(genuuid||uuidgen||uuid) 2>/dev/null`/" $< > $@.tmp
# else
	sed -e "s/^uuid=[-0-9a-f]*/uuid=`($(STAGING_DIR_HOST)/bin/genuuid||$(STAGING_DIR_HOST)/bin/uuidgen||$(STAGING_DIR_HOST)/bin/uuid) 2>/dev/null`/" $< > $@.tmp
# endif
	mv $@.tmp $@

include $(SRCDIR)/check.mk

miniupnpd:	$(BASEOBJS) $(LNXOBJS) $(SDNOBJS) $(JSONLIB) 

testupnpdescgen:	$(TESTUPNPDESCGENOBJS)

testgetifstats:	testgetifstats.o getifstats.o

testupnppermissions:	testupnppermissions.o upnppermissions.o

testgetifaddr:	testgetifaddr.o getifaddr.o

testgetroute:	testgetroute.o getroute.o upnputils.o

testssdppktgen:	testssdppktgen.o

testasyncsendto:	testasyncsendto.o asyncsendto.o upnputils.o \
	getroute.o

testportinuse:	testportinuse.o portinuse.o getifaddr.o \
	iptcrdr.o upnpglobalvars.o mongoose.o onosclient.o $(JSONLIB)

testminissdp:	testminissdp.o minissdp.o upnputils.o upnpglobalvars.o \
	asyncsendto.o getroute.o

testjwtauth:	testjwtauth.o jwtauth.o $(JSONLIB)

miniupnpdctl:	miniupnpdctl.o

config.mk config.h:	$(SRCDIR)/configure $(SRCDIR)/VERSION
	$(SHELL) $< $(CONFIG_OPTIONS)

depend:	$(DEP)

%.d:	$(SRCDIR)/%.c
	$(CC) $(CPPFLAGS) $(DEPFLAGS) -o $@ $<

dox:	$(SRCDIR)/miniupnpd.doxyconf
	(cat $< ; echo "INPUT=$(SRCDIR)" ) | $(DOXYGEN) -

%.o:	$(SRCDIR)/%.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

%.o:	$(SRCDIR)/linux/%.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

%.o:	$(SRCDIR)/sdn/%.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

%.o:	$(SRCDIR)/sdn/mongoose/%.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

$(JSONLIB):
	mkdir $(JSONBUILDPATH) && cd $(JSONBUILDPATH) && cmake .. && make

print-%:
	@echo "$* = $($*)"

ifneq ($(MAKECMDGOALS),clean)
-include $(DEP)
endif
